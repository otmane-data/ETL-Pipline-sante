x-airflow-common: 
  &airflow-common
  build: ./
  image: ${AIRFLOW_IMAGE_NAME:-extend_airflow_e_commerce:latest}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    # Connexions Postgres
    AIRFLOW_CONN_PROD_DB_CONN: '{"conn_type": "postgres", "user": "postgres", "password": "postgres", "host": "postgres-prod", "port": 5432, "schema": "e_commerce_database"}'    
    AIRFLOW_CONN_ANALYTICS_DB_CONN: '{"conn_type": "postgres", "user": "postgres", "password": "postgres", "host": "postgres-etl", "port": 5432, "schema": "ecommerce_metrics"}'
    # Connexion Minio
    AIRFLOW_CONN_MINIO_S3: '{"conn_type": "s3", "extra": {
          "endpoint_url": "http://minio:9000",  "aws_access_key_id": "minioadmin",
          "aws_secret_access_key": "minioadmin",  "verify": false } }'


  volumes:
    - ./dags:/opt/airflow/dags
    - ./plugins:/opt/airflow/plugins
    - ./logs:/opt/airflow/logs
    - ./dump:/opt/airflow/dump
    - ./statsd_mapping.yml:/opt/airflow/statsd_mapping.yml
    - ./airflow.cfg:/opt/airflow/airflow.cfg
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 10
      start_period: 10s
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5431:5431"
    networks:
      - sante-network
    depends_on : 
      data-genrator: 
        condition: service_started
    #       condition: service_completed_successfully

  data-genrator:
    build:
      context: ./data_generator
    depends_on:
      postgres-prod:
        condition: service_healthy
    volumes:
      - ./data_generator:/opt/airflow/data_generator
    networks:
      - sante-network

  postgres-etl:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sante_metrics
    ports:
      - "5433:5431"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 10
      start_period: 100s
    volumes:
      - postgres-etl-db-volume:/var/lib/postgresql/data
      - ./init-analytics.sql:/docker-entrypoint-initdb.d/init-analytics.sql
    depends_on : 
      airflow-webserver: 
        condition: service_started
    networks:
      - sante-network

  postgres-prod:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sante_database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 10
      start_period: 10s
    ports:
      - "5434:5431"
    volumes:
      - postgres-prod-db-volume:/var/lib/postgresql/data
      - ./init-prod.sql:/docker-entrypoint-initdb.d/init-prod.sql
    networks:
      - sante-network

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      - airflow-init
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-scheduler.pid ]"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always
    command: airflow scheduler
    networks:
      - sante-network

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    depends_on:
      - airflow-init
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 5
    restart: always
    networks:
      - sante-network

  airflow-init:
    <<: *airflow-common
    command: airflow db init
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_PASSWORD:-airflow}
    networks:
      - sante-network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      - ~/minio/data:/data
    command: server /data --console-address ":9001" & mc mb ecommerce-data
    depends_on:
      airflow-webserver:
        condition: service_started
    networks:
      - sante-network

    

  superset:
    build:
      context: ./superset
      dockerfile: Dockerfile
    container_name: superset
    environment:
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@superset.com
      - ADMIN_PASSWORD=admin
      - LOAD_EXAMPLES=yes
    depends_on:
      - airflow-webserver
    ports:
      - '8089:8089'
    networks:
      - sante-network


  statsd-exporter:
    image: prom/statsd-exporter:v0.21.0
    container_name: airflow-statsd-exporter
    volumes:
      - ./statsd_mapping.yml:/home/statsd-mapping-configs.yaml
    entrypoint: ["/bin/sh", "-c", "--"]
    command: ["statsd_exporter --log.level debug --statsd.mapping-config=/home/statsd-mapping-configs.yaml"]
    ports:
      - 9102:9102   # scrape port
      - 9125:9125   # ingest port
    restart: always
    networks:
      - sante-network
  
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:postgres@postgres-prod:5432/?sslmode=disable,postgresql://postgres:postgres@postgres-etl:5432/?sslmode=disable,postgresql://airflow:airflow@postgres:5432/?sslmode=disable"
      #- PG_EXPORTER_EXTEND_QUERY_PATH=/config/postgres_exporter.yml
    # volumes:
    #   - ./postgres_exporter/postgres_exporter.yml:/config/postgres_exporter.yml
    ports:
      - 9187:9187
    depends_on:
      - postgres
      - postgres-etl
      - postgres-prod
    networks:
      - sante-network


    

  prometheus:
    image: prom/prometheus:v2.26.0
    container_name: airflow-prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    restart: always
    networks:
      - sante-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=grafana
      - GF_USERS_ALLOW_SIGN_UP=true
    restart: always
    ports:
      - 3000:3000
    networks:
      - sante-network
    
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8083:8080"  # Exposition du port pour accéder à l'interface de cAdvisor
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - sante-network

volumes:
  postgres-db-volume:
  minio_data:
  superset_data:
  postgres-etl-db-volume:
  postgres-prod-db-volume:
  prometheus_data:
  grafana_data:

networks:
  sante-network:
    driver: bridge